{"version":3,"sources":["../src/generateGridStyles.js"],"names":["generateGrid","gridSizes","nextBreakpointUp","breakpoint","styles","forEach","size","key","flexBasis","flexGrow","maxWidth","width","Math","round","generateGridReducer","accumulator"],"mappings":";;;;;;;;QACgBA,Y,GAAAA,Y;;;;AAAT,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,gBAAjC,EAAmDC,UAAnD,EAA+D;AACpE,MAAMC,SAAS,EAAf;;AAEAH,YAAUI,OAAV,CAAkB,UAACC,IAAD,EAAU;AAC1B,QAAMC,gBAAcJ,UAAd,SAA4BG,IAAlC;;AAEA,QAAIA,SAAS,IAAb,EAAmB;AACjB;AACAF,aAAOG,GAAP,IAAc;AACZC,mBAAW,CADC;AAEZC,kBAAU,CAFE;AAGZC,kBAAU;AAHE,OAAd;AAKA;AACD;;AAED,QAAIJ,SAAS,MAAb,EAAqB;AACnBF,aAAOG,GAAP,IAAc;AACZC,mBAAW,MADC;AAEZC,kBAAU,CAFE;AAGZC,kBAAU;AAHE,OAAd;AAKA;AACD;;AAED;AACA,QAAMC,QAAWC,KAAKC,KAAL,CAAYP,OAAO,EAAR,GAAc,IAAzB,IAAiC,IAA5C,MAAN;;AAEA;AACA;AACAF,WAAOG,GAAP,IAAc;AACZC,iBAAWG,KADC;AAEZF,gBAAU,CAFE;AAGZC,gBAAUC;AAHE,KAAd;AAKD,GAhCD;;AAkCA,SAAOP,MAAP;AACD;;AAEM,IAAMU,oDAAsB,SAAtBA,mBAAsB,CAACb,SAAD,EAAYC,gBAAZ,EAAiC;AAClE,SAAO,UAACa,WAAD,EAAcZ,UAAd,EAA6B;AAClC,QAAMC,SAASJ,aAAaC,SAAb,EAAwBC,gBAAxB,EAA0CC,UAA1C,CAAf;;AAEA,QAAIA,eAAe,IAAnB,EAAyB;AACvB,0BACKY,WADL,EAEKX,MAFL;AAID,KALD,MAKO;AACL,0BACKW,WADL,sBAGKb,iBAAiBC,UAAjB,CAHL,EAGoCC,MAHpC;AAMD;AACF,GAhBD;AAiBD,CAlBM","file":"generateGridStyles.js","sourcesContent":["\nexport function generateGrid(gridSizes, nextBreakpointUp, breakpoint) {\n  const styles = {};\n\n  gridSizes.forEach((size) => {\n    const key = `grid-${breakpoint}-${size}`;\n\n    if (size === true) {\n      // For the auto layouting\n      styles[key] = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%',\n      };\n      return;\n    }\n\n    if (size === 'auto') {\n      styles[key] = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        maxWidth: 'none',\n      };\n      return;\n    }\n\n    // Only keep 6 significant numbers.\n    const width = `${Math.round((size / 12) * 10e6) / 10e4}%`;\n\n    // Close to the bootstrap implementation:\n    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n    styles[key] = {\n      flexBasis: width,\n      flexGrow: 0,\n      maxWidth: width,\n    };\n  });\n\n  return styles;\n}\n\nexport const generateGridReducer = (gridSizes, nextBreakpointUp) => {\n  return (accumulator, breakpoint) => {\n    const styles = generateGrid(gridSizes, nextBreakpointUp, breakpoint);\n\n    if (breakpoint === 'xs') {\n      return {\n        ...accumulator,\n        ...styles,\n      }\n    } else {\n      return {\n        ...accumulator,\n        ...{\n          [nextBreakpointUp(breakpoint)]: styles\n        },\n      }\n    }\n  };\n};\n"]}